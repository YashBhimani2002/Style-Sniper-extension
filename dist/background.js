/******/ (() => { // webpackBootstrap
/*!**************************************!*\
  !*** ./src/background/background.js ***!
  \**************************************/
/**
 * Listens for messages from the content script and the popup script.
 * The content script sends a message to store the toggle status in local storage
 * and to clear the toggle status from local storage.
 * The popup script sends a message to store the toggle status in local storage.
 * @param {object} message - The message that is received from the content script or the popup script.
 * @param {object} sender - The sender of the message.
 * @param {function} sendResponse - The callback function to respond to the message.
 */
chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
  if (message.action === "store") {
    storeToggleStatus(message.status);
  } else if (message.action === "clear") {
    clearToggleStatusFromLocalStorage();
  }
});

/**
 * Stores the toggle status in Chrome's local storage and sends a notification
 * indicating that the extension has been activated.
 *
 * @param {boolean} status - The status to be stored, indicating whether the extension is active.
 */

function storeToggleStatus(status) {
  chrome.storage.local.set({
    'toggleStatus': status
  });
  sendNotificationToggleExtension('Style Sniper', 'Extension Activated Successfully', "styleSniperNotificationOfActivated".concat(Math.random()));
}

/**
 * Clears the toggle status from Chrome's local storage and sends a notification
 * indicating that the extension has been deactivated.
 */
function clearToggleStatusFromLocalStorage() {
  chrome.storage.local.clear();
  sendNotificationToggleExtension('Style Sniper', 'Extension Deactivated Successfully', "styleSniperNotificationOfDeactivated".concat(Math.random()));
}

/**
 * Sends a notification to the user that the extension has been toggled on or off.
 * @param {string} title - The title of the notification.
 * @param {string} message - The message to be displayed in the notification.
 * @param {string} notificationId - The ID of the notification to be created.
 */
function sendNotificationToggleExtension(title, message, notificationId) {
  chrome.notifications.create(notificationId, {
    type: "list",
    iconUrl: "./icon.png",
    title: title,
    message: message,
    items: [{
      title: title,
      message: message
    }]
  });
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTLENBQUNDLFdBQVcsQ0FBQyxVQUFDQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFLO0VBQ3BFLElBQUlGLE9BQU8sQ0FBQ0csTUFBTSxLQUFLLE9BQU8sRUFBRTtJQUM1QkMsaUJBQWlCLENBQUNKLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDO0VBQ3JDLENBQUMsTUFBTSxJQUFJTCxPQUFPLENBQUNHLE1BQU0sS0FBSyxPQUFPLEVBQUU7SUFDbkNHLGlDQUFpQyxDQUFDLENBQUM7RUFDdkM7QUFDSixDQUFDLENBQUM7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNGLGlCQUFpQkEsQ0FBQ0MsTUFBTSxFQUFFO0VBQy9CVCxNQUFNLENBQUNXLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLENBQUM7SUFDckIsY0FBYyxFQUFFSjtFQUNwQixDQUFDLENBQUM7RUFDRkssK0JBQStCLENBQUMsY0FBYyxFQUFFLGtDQUFrQyx1Q0FBQUMsTUFBQSxDQUFzQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFFLENBQUM7QUFDNUk7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTUCxpQ0FBaUNBLENBQUEsRUFBRztFQUN6Q1YsTUFBTSxDQUFDVyxPQUFPLENBQUNDLEtBQUssQ0FBQ00sS0FBSyxDQUFDLENBQUM7RUFDNUJKLCtCQUErQixDQUFDLGNBQWMsRUFBRSxvQ0FBb0MseUNBQUFDLE1BQUEsQ0FBd0NDLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDO0FBQ2hKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNILCtCQUErQkEsQ0FBQ0ssS0FBSyxFQUFFZixPQUFPLEVBQUNnQixjQUFjLEVBQUU7RUFDcEVwQixNQUFNLENBQUNxQixhQUFhLENBQUNDLE1BQU0sQ0FBQ0YsY0FBYyxFQUFDO0lBQ3ZDRyxJQUFJLEVBQUUsTUFBTTtJQUNaQyxPQUFPLEVBQUUsWUFBWTtJQUNyQkwsS0FBSyxFQUFFQSxLQUFLO0lBQ1pmLE9BQU8sRUFBUEEsT0FBTztJQUNQcUIsS0FBSyxFQUFFLENBQ0w7TUFDRU4sS0FBSyxFQUFFQSxLQUFLO01BQ1pmLE9BQU8sRUFBRUE7SUFDWCxDQUFDO0VBR0wsQ0FBQyxDQUFDO0FBQ1IsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL2JhY2tncm91bmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBMaXN0ZW5zIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBjb250ZW50IHNjcmlwdCBhbmQgdGhlIHBvcHVwIHNjcmlwdC5cclxuICogVGhlIGNvbnRlbnQgc2NyaXB0IHNlbmRzIGEgbWVzc2FnZSB0byBzdG9yZSB0aGUgdG9nZ2xlIHN0YXR1cyBpbiBsb2NhbCBzdG9yYWdlXHJcbiAqIGFuZCB0byBjbGVhciB0aGUgdG9nZ2xlIHN0YXR1cyBmcm9tIGxvY2FsIHN0b3JhZ2UuXHJcbiAqIFRoZSBwb3B1cCBzY3JpcHQgc2VuZHMgYSBtZXNzYWdlIHRvIHN0b3JlIHRoZSB0b2dnbGUgc3RhdHVzIGluIGxvY2FsIHN0b3JhZ2UuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdGhhdCBpcyByZWNlaXZlZCBmcm9tIHRoZSBjb250ZW50IHNjcmlwdCBvciB0aGUgcG9wdXAgc2NyaXB0LlxyXG4gKiBAcGFyYW0ge29iamVjdH0gc2VuZGVyIC0gVGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZS5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2VuZFJlc3BvbnNlIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlc3BvbmQgdG8gdGhlIG1lc3NhZ2UuXHJcbiAqL1xyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XHJcbiAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09IFwic3RvcmVcIikge1xyXG4gICAgICAgIHN0b3JlVG9nZ2xlU3RhdHVzKG1lc3NhZ2Uuc3RhdHVzKTtcclxuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5hY3Rpb24gPT09IFwiY2xlYXJcIikge1xyXG4gICAgICAgIGNsZWFyVG9nZ2xlU3RhdHVzRnJvbUxvY2FsU3RvcmFnZSgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG4vKipcclxuICogU3RvcmVzIHRoZSB0b2dnbGUgc3RhdHVzIGluIENocm9tZSdzIGxvY2FsIHN0b3JhZ2UgYW5kIHNlbmRzIGEgbm90aWZpY2F0aW9uXHJcbiAqIGluZGljYXRpbmcgdGhhdCB0aGUgZXh0ZW5zaW9uIGhhcyBiZWVuIGFjdGl2YXRlZC5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBzdGF0dXMgLSBUaGUgc3RhdHVzIHRvIGJlIHN0b3JlZCwgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBleHRlbnNpb24gaXMgYWN0aXZlLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVG9nZ2xlU3RhdHVzKHN0YXR1cykge1xyXG4gICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHtcclxuICAgICAgICAndG9nZ2xlU3RhdHVzJzogc3RhdHVzXHJcbiAgICB9KTtcclxuICAgIHNlbmROb3RpZmljYXRpb25Ub2dnbGVFeHRlbnNpb24oJ1N0eWxlIFNuaXBlcicsICdFeHRlbnNpb24gQWN0aXZhdGVkIFN1Y2Nlc3NmdWxseScsYHN0eWxlU25pcGVyTm90aWZpY2F0aW9uT2ZBY3RpdmF0ZWQke01hdGgucmFuZG9tKCl9YCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIHRvZ2dsZSBzdGF0dXMgZnJvbSBDaHJvbWUncyBsb2NhbCBzdG9yYWdlIGFuZCBzZW5kcyBhIG5vdGlmaWNhdGlvblxyXG4gKiBpbmRpY2F0aW5nIHRoYXQgdGhlIGV4dGVuc2lvbiBoYXMgYmVlbiBkZWFjdGl2YXRlZC5cclxuICovXHJcbmZ1bmN0aW9uIGNsZWFyVG9nZ2xlU3RhdHVzRnJvbUxvY2FsU3RvcmFnZSgpIHtcclxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XHJcbiAgICBzZW5kTm90aWZpY2F0aW9uVG9nZ2xlRXh0ZW5zaW9uKCdTdHlsZSBTbmlwZXInLCAnRXh0ZW5zaW9uIERlYWN0aXZhdGVkIFN1Y2Nlc3NmdWxseScsYHN0eWxlU25pcGVyTm90aWZpY2F0aW9uT2ZEZWFjdGl2YXRlZCR7TWF0aC5yYW5kb20oKX1gKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgbm90aWZpY2F0aW9uIHRvIHRoZSB1c2VyIHRoYXQgdGhlIGV4dGVuc2lvbiBoYXMgYmVlbiB0b2dnbGVkIG9uIG9yIG9mZi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBub3RpZmljYXRpb24uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBub3RpZmljYXRpb24uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBub3RpZmljYXRpb25JZCAtIFRoZSBJRCBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGJlIGNyZWF0ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZW5kTm90aWZpY2F0aW9uVG9nZ2xlRXh0ZW5zaW9uKHRpdGxlLCBtZXNzYWdlLG5vdGlmaWNhdGlvbklkKSB7XHJcbiAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUobm90aWZpY2F0aW9uSWQse1xyXG4gICAgICAgIHR5cGU6IFwibGlzdFwiLFxyXG4gICAgICAgIGljb25Vcmw6IFwiLi9pY29uLnBuZ1wiLFxyXG4gICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgIGl0ZW1zOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuXHJcbiAgICAgIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJjaHJvbWUiLCJydW50aW1lIiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwiYWN0aW9uIiwic3RvcmVUb2dnbGVTdGF0dXMiLCJzdGF0dXMiLCJjbGVhclRvZ2dsZVN0YXR1c0Zyb21Mb2NhbFN0b3JhZ2UiLCJzdG9yYWdlIiwibG9jYWwiLCJzZXQiLCJzZW5kTm90aWZpY2F0aW9uVG9nZ2xlRXh0ZW5zaW9uIiwiY29uY2F0IiwiTWF0aCIsInJhbmRvbSIsImNsZWFyIiwidGl0bGUiLCJub3RpZmljYXRpb25JZCIsIm5vdGlmaWNhdGlvbnMiLCJjcmVhdGUiLCJ0eXBlIiwiaWNvblVybCIsIml0ZW1zIl0sInNvdXJjZVJvb3QiOiIifQ==