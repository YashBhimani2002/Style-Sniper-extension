/******/ (() => { // webpackBootstrap
/*!**************************************!*\
  !*** ./src/background/background.js ***!
  \**************************************/
/**
 * Listens for messages from the content script and the popup script.
 * The content script sends a message to store the toggle status in local storage
 * and to clear the toggle status from local storage.
 * The popup script sends a message to store the toggle status in local storage.
 * @param {object} message - The message that is received from the content script or the popup script.
 * @param {object} sender - The sender of the message.
 * @param {function} sendResponse - The callback function to respond to the message.
 */
chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
  if (message.action === "store") {
    storeToggleStatus(message.status);
  } else if (message.action === "clear") {
    clearToggleStatusFromLocalStorage();
  }
});

/**
 * Stores the toggle status in Chrome's local storage and sends a notification
 * indicating that the extension has been activated.
 *
 * @param {boolean} status - The status to be stored, indicating whether the extension is active.
 */

function storeToggleStatus(status) {
  chrome.storage.local.set({
    'toggleStatus': status
  });
  sendNotificationToggleExtension('Style Sniper', 'Extension Activated Successfully', "styleSniperNotificationOfActivated".concat(Math.random()));
  chrome.tabs.query({
    active: true,
    currentWindow: true
  }, function (tab) {
    chrome.scripting.executeScript({
      target: {
        tabId: tab[0].id
      },
      files: ['content.js']
    });
  });
}

/**
 * Clears the toggle status from Chrome's local storage and sends a notification
 * indicating that the extension has been deactivated.
 */
function clearToggleStatusFromLocalStorage() {
  chrome.storage.local.clear();
  sendNotificationToggleExtension('Style Sniper', 'Extension Deactivated Successfully', "styleSniperNotificationOfDeactivated".concat(Math.random()));
  document.removeEventListener("click", window.customClickListener);
}

/**
 * Sends a notification to the user that the extension has been toggled on or off.
 * @param {string} title - The title of the notification.
 * @param {string} message - The message to be displayed in the notification.
 * @param {string} notificationId - The ID of the notification to be created.
 */
function sendNotificationToggleExtension(title, message, notificationId) {
  chrome.notifications.create(notificationId, {
    type: "list",
    iconUrl: "./icon.png",
    title: title,
    message: message,
    items: [{
      title: title,
      message: message
    }]
  });
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTLENBQUNDLFdBQVcsQ0FBQyxVQUFDQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFLO0VBQ3BFLElBQUlGLE9BQU8sQ0FBQ0csTUFBTSxLQUFLLE9BQU8sRUFBRTtJQUM1QkMsaUJBQWlCLENBQUNKLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDO0VBQ3JDLENBQUMsTUFBTSxJQUFJTCxPQUFPLENBQUNHLE1BQU0sS0FBSyxPQUFPLEVBQUU7SUFDbkNHLGlDQUFpQyxDQUFDLENBQUM7RUFDdkM7QUFDSixDQUFDLENBQUM7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNGLGlCQUFpQkEsQ0FBQ0MsTUFBTSxFQUFFO0VBQy9CVCxNQUFNLENBQUNXLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLENBQUM7SUFDckIsY0FBYyxFQUFFSjtFQUNwQixDQUFDLENBQUM7RUFDRkssK0JBQStCLENBQUMsY0FBYyxFQUFFLGtDQUFrQyx1Q0FBQUMsTUFBQSxDQUFzQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFFLENBQUM7RUFDeElqQixNQUFNLENBQUNrQixJQUFJLENBQUNDLEtBQUssQ0FBQztJQUFDQyxNQUFNLEVBQUUsSUFBSTtJQUFFQyxhQUFhLEVBQUU7RUFBSSxDQUFDLEVBQUUsVUFBU0MsR0FBRyxFQUFFO0lBQ2xFdEIsTUFBTSxDQUFDdUIsU0FBUyxDQUFDQyxhQUFhLENBQUM7TUFDM0JDLE1BQU0sRUFBRTtRQUFDQyxLQUFLLEVBQUVKLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQ0s7TUFBRSxDQUFDO01BQzFCQyxLQUFLLEVBQUUsQ0FBQyxZQUFZO0lBQ3hCLENBQUMsQ0FBQztFQUNMLENBQUMsQ0FBQztBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2xCLGlDQUFpQ0EsQ0FBQSxFQUFHO0VBQ3pDVixNQUFNLENBQUNXLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDaUIsS0FBSyxDQUFDLENBQUM7RUFDNUJmLCtCQUErQixDQUFDLGNBQWMsRUFBRSxvQ0FBb0MseUNBQUFDLE1BQUEsQ0FBd0NDLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDO0VBQzVJYSxRQUFRLENBQUNDLG1CQUFtQixDQUFDLE9BQU8sRUFBRUMsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQztBQUNyRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTbkIsK0JBQStCQSxDQUFDb0IsS0FBSyxFQUFFOUIsT0FBTyxFQUFDK0IsY0FBYyxFQUFFO0VBQ3BFbkMsTUFBTSxDQUFDb0MsYUFBYSxDQUFDQyxNQUFNLENBQUNGLGNBQWMsRUFBQztJQUN2Q0csSUFBSSxFQUFFLE1BQU07SUFDWkMsT0FBTyxFQUFFLFlBQVk7SUFDckJMLEtBQUssRUFBRUEsS0FBSztJQUNaOUIsT0FBTyxFQUFQQSxPQUFPO0lBQ1BvQyxLQUFLLEVBQUUsQ0FDTDtNQUNFTixLQUFLLEVBQUVBLEtBQUs7TUFDWjlCLE9BQU8sRUFBRUE7SUFDWCxDQUFDO0VBR0wsQ0FBQyxDQUFDO0FBQ1IsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL2JhY2tncm91bmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBMaXN0ZW5zIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBjb250ZW50IHNjcmlwdCBhbmQgdGhlIHBvcHVwIHNjcmlwdC5cclxuICogVGhlIGNvbnRlbnQgc2NyaXB0IHNlbmRzIGEgbWVzc2FnZSB0byBzdG9yZSB0aGUgdG9nZ2xlIHN0YXR1cyBpbiBsb2NhbCBzdG9yYWdlXHJcbiAqIGFuZCB0byBjbGVhciB0aGUgdG9nZ2xlIHN0YXR1cyBmcm9tIGxvY2FsIHN0b3JhZ2UuXHJcbiAqIFRoZSBwb3B1cCBzY3JpcHQgc2VuZHMgYSBtZXNzYWdlIHRvIHN0b3JlIHRoZSB0b2dnbGUgc3RhdHVzIGluIGxvY2FsIHN0b3JhZ2UuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdGhhdCBpcyByZWNlaXZlZCBmcm9tIHRoZSBjb250ZW50IHNjcmlwdCBvciB0aGUgcG9wdXAgc2NyaXB0LlxyXG4gKiBAcGFyYW0ge29iamVjdH0gc2VuZGVyIC0gVGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZS5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2VuZFJlc3BvbnNlIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlc3BvbmQgdG8gdGhlIG1lc3NhZ2UuXHJcbiAqL1xyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XHJcbiAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09IFwic3RvcmVcIikge1xyXG4gICAgICAgIHN0b3JlVG9nZ2xlU3RhdHVzKG1lc3NhZ2Uuc3RhdHVzKTtcclxuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5hY3Rpb24gPT09IFwiY2xlYXJcIikge1xyXG4gICAgICAgIGNsZWFyVG9nZ2xlU3RhdHVzRnJvbUxvY2FsU3RvcmFnZSgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG4vKipcclxuICogU3RvcmVzIHRoZSB0b2dnbGUgc3RhdHVzIGluIENocm9tZSdzIGxvY2FsIHN0b3JhZ2UgYW5kIHNlbmRzIGEgbm90aWZpY2F0aW9uXHJcbiAqIGluZGljYXRpbmcgdGhhdCB0aGUgZXh0ZW5zaW9uIGhhcyBiZWVuIGFjdGl2YXRlZC5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBzdGF0dXMgLSBUaGUgc3RhdHVzIHRvIGJlIHN0b3JlZCwgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBleHRlbnNpb24gaXMgYWN0aXZlLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVG9nZ2xlU3RhdHVzKHN0YXR1cykge1xyXG4gICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHtcclxuICAgICAgICAndG9nZ2xlU3RhdHVzJzogc3RhdHVzXHJcbiAgICB9KTtcclxuICAgIHNlbmROb3RpZmljYXRpb25Ub2dnbGVFeHRlbnNpb24oJ1N0eWxlIFNuaXBlcicsICdFeHRlbnNpb24gQWN0aXZhdGVkIFN1Y2Nlc3NmdWxseScsYHN0eWxlU25pcGVyTm90aWZpY2F0aW9uT2ZBY3RpdmF0ZWQke01hdGgucmFuZG9tKCl9YCk7XHJcbiAgICBjaHJvbWUudGFicy5xdWVyeSh7YWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlfSwgZnVuY3Rpb24odGFiKSB7XHJcbiAgICAgICBjaHJvbWUuc2NyaXB0aW5nLmV4ZWN1dGVTY3JpcHQoe1xyXG4gICAgICAgICAgIHRhcmdldDoge3RhYklkOiB0YWJbMF0uaWR9LFxyXG4gICAgICAgICAgIGZpbGVzOiBbJ2NvbnRlbnQuanMnXVxyXG4gICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIHRvZ2dsZSBzdGF0dXMgZnJvbSBDaHJvbWUncyBsb2NhbCBzdG9yYWdlIGFuZCBzZW5kcyBhIG5vdGlmaWNhdGlvblxyXG4gKiBpbmRpY2F0aW5nIHRoYXQgdGhlIGV4dGVuc2lvbiBoYXMgYmVlbiBkZWFjdGl2YXRlZC5cclxuICovXHJcbmZ1bmN0aW9uIGNsZWFyVG9nZ2xlU3RhdHVzRnJvbUxvY2FsU3RvcmFnZSgpIHtcclxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmNsZWFyKCk7XHJcbiAgICBzZW5kTm90aWZpY2F0aW9uVG9nZ2xlRXh0ZW5zaW9uKCdTdHlsZSBTbmlwZXInLCAnRXh0ZW5zaW9uIERlYWN0aXZhdGVkIFN1Y2Nlc3NmdWxseScsYHN0eWxlU25pcGVyTm90aWZpY2F0aW9uT2ZEZWFjdGl2YXRlZCR7TWF0aC5yYW5kb20oKX1gKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB3aW5kb3cuY3VzdG9tQ2xpY2tMaXN0ZW5lcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZW5kcyBhIG5vdGlmaWNhdGlvbiB0byB0aGUgdXNlciB0aGF0IHRoZSBleHRlbnNpb24gaGFzIGJlZW4gdG9nZ2xlZCBvbiBvciBvZmYuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgbm90aWZpY2F0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgbm90aWZpY2F0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbm90aWZpY2F0aW9uSWQgLSBUaGUgSUQgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBiZSBjcmVhdGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gc2VuZE5vdGlmaWNhdGlvblRvZ2dsZUV4dGVuc2lvbih0aXRsZSwgbWVzc2FnZSxub3RpZmljYXRpb25JZCkge1xyXG4gICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKG5vdGlmaWNhdGlvbklkLHtcclxuICAgICAgICB0eXBlOiBcImxpc3RcIixcclxuICAgICAgICBpY29uVXJsOiBcIi4vaWNvbi5wbmdcIixcclxuICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcblxyXG4gICAgICB9KTtcclxufVxyXG4iXSwibmFtZXMiOlsiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsImFjdGlvbiIsInN0b3JlVG9nZ2xlU3RhdHVzIiwic3RhdHVzIiwiY2xlYXJUb2dnbGVTdGF0dXNGcm9tTG9jYWxTdG9yYWdlIiwic3RvcmFnZSIsImxvY2FsIiwic2V0Iiwic2VuZE5vdGlmaWNhdGlvblRvZ2dsZUV4dGVuc2lvbiIsImNvbmNhdCIsIk1hdGgiLCJyYW5kb20iLCJ0YWJzIiwicXVlcnkiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwidGFiIiwic2NyaXB0aW5nIiwiZXhlY3V0ZVNjcmlwdCIsInRhcmdldCIsInRhYklkIiwiaWQiLCJmaWxlcyIsImNsZWFyIiwiZG9jdW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwid2luZG93IiwiY3VzdG9tQ2xpY2tMaXN0ZW5lciIsInRpdGxlIiwibm90aWZpY2F0aW9uSWQiLCJub3RpZmljYXRpb25zIiwiY3JlYXRlIiwidHlwZSIsImljb25VcmwiLCJpdGVtcyJdLCJzb3VyY2VSb290IjoiIn0=